@startuml classes
set namespaceSeparator none
class "core.session.Sessions" as core.session.Sessions #aliceblue {
  sessions : dict
  add_new_session(username: str, db: Database) -> None
  get_all_sessions() -> dict
  get_session(username: str) -> UserSession
  remove_session(username: str) -> None
}
class "core.session.UserSession" as core.session.UserSession #aliceblue {
  cart : dict
  date : NoneType
  db
  total_cost : int
  username : str
  add_new_item(id: str, name: str, price: int, quantity: int, discount: float, tax_rate: float) -> None
  empty_cart() -> dict
  is_item_in_cart(id: str) -> bool
  remove_item(id: str) -> None
  submit_cart() -> None
  update_item_quantity(id: str, change_to_quantity: int) -> None
  update_total_cost() -> None
}
class "database.db.Database" as database.db.Database #antiquewhite {
  connection
  cursor
  database_path : str
  get_all_item_ids()
  get_all_user_information()
  get_cost_by_sale_id(sale_id: int)
  get_email_by_username(username: str)
  get_first_name_by_username(username: str)
  get_full_inventory()
  get_full_sale_by_id(sale_id: int)
  get_full_sales_information()
  get_item_category_by_id(item_id: int)
  get_item_id_by_sale_id(sale_id: int)
  get_item_image_url_by_id(item_id: int)
  get_item_info_by_id(item_id: int)
  get_item_name_by_id(item_id: int)
  get_item_price_by_id(item_id: int)
  get_item_stock_by_id(item_id: int)
  get_last_name_by_username(username: str)
  get_password_hash_by_username(username: str)
  get_quantity_by_sale_id(sale_id: int)
  get_sale_date_by_sale_id(sale_id: int)
  get_sales_by_cost_range(start_cost: float, end_cost: float)
  get_sales_by_date_range(start_date: dt.date, end_date: dt.date)
  get_sales_by_item_id(item_id: int)
  get_sales_by_quantity_range(start_quantity: int, end_quantity: int)
  get_sales_by_transaction_id(transaction_id: int)
  get_sales_by_username(username: str)
  get_transaction_id_by_sale_id(sale_id: int)
  get_username_by_sale_id(sale_id: int)
  insert_new_item(item_name: str, price: int, info: str) -> None
  insert_new_sale(transaction_id: int, username: str, item_id: int, quantity: int, sale_date: dt.date, cost: float)
  insert_user(username: str, password_hash: str, email: str, first_name: str, last_name: str) -> None
  set_email(username: str, new_email: str)
  set_first_name(username: str, new_first_name: str)
  set_item_category(item_id: int, new_category: str)
  set_item_image_url(item_id: int, new_image_url: str)
  set_item_info(item_id: int, new_info: str)
  set_item_name(item_id: int, new_name: str)
  set_item_price(item_id: int, new_price: float)
  set_item_stock(item_id: int, new_stock: int)
  set_last_name(username: str, new_last_name: str)
  set_password_hash(username: str, new_password_hash: str)
  set_sale_cost(sale_id: int, discount: float, tax: float)
  set_sale_date(sale_id: int, new_sale_date: dt.date)
  set_sale_item_id(sale_id: int, new_item_id: int)
  set_sale_quantity(sale_id: int, new_quantity: int)
  set_sale_transaction_id(sale_id: int, new_transaction_id: int)
  set_sale_username(sale_id: int, new_username: str)
}
class "datetime.date" as datetime.date #grey {
  day
  month
  year
  ctime()
  fromisocalendar(year, week, day)
  fromisoformat(date_string)
  fromordinal(n)
  fromtimestamp(t)
  isocalendar()
  isoformat()
  isoweekday()
  replace(year, month, day)
  strftime(fmt)
  timetuple()
  today()
  toordinal()
  weekday()
}
class "datetime.datetime" as datetime.datetime #grey {
  fold
  hour
  microsecond
  minute
  second
  tzinfo
  astimezone(tz)
  combine(date, time, tzinfo)
  ctime()
  date()
  dst()
  fromisoformat(date_string)
  fromtimestamp(t, tz)
  isoformat(sep, timespec)
  now(tz)
  replace(year, month, day, hour, minute, second, microsecond, tzinfo)
  strptime(date_string, format)
  time()
  timestamp()
  timetuple()
  timetz()
  tzname()
  utcfromtimestamp(t)
  utcnow()
  utcoffset()
  utctimetuple()
}
datetime.datetime --|> datetime.date
datetime.datetime --* core.session.UserSession : date
database.db.Database --o core.session.UserSession : db
@enduml
